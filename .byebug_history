c!
n
@pass.save
@pass
n
c
render json: {message: "Pass created successfully", pass: PassSerializer.new(@pass)}, status: :ok
n
@pass.save
n
@pass = current_user.build_pass(pass_params)
n
c!
c
render json: {message: "Pass created successfully", pass: PassSerializer.new(@pass)}, status: :ok
n
@pass.save
n
@pass = current_user.build_pass(pass_params)
n
current_user.pass.present?
n
current_user.user?
n
current_user.admin?
c
n
current_user.user?
n
current_user.admin?
c!
current_user.pass
current_user.pass.present?
current_user.user?
n
 current_user.admin?
c!
c
n
 @pass.save
n
current_user.admin?
c
pass_params
n
 @pass.nil?
@pass
@pass = Pass.find_by(username: params[:username], passenger_email: params[:passenger_email])
n
current_user.admin?
n
current_user.admin?
c
n
@pass.nil?
n
@pass.present?
n
 @pass = Pass.find_by(username: params[:username], passenger_email: params[:passenger_email])
n
current_user.admin?
urrent_user.admin?
c!
 @pass = Pass.find_by(username: params[:username], passenger_email: params[:passenger_email])
n
current_user.admin?
c!
@user
 @user.pass.present?
n
@user = User.find_by(username: params[:username])
n
current_user.admin?
n
current_user.admin?
c
n
User.find_by(username: params[:username], email: params[:email])
n
create_pass_for_user
n
current_user.admin?
c
@pass
@pass.save
n
@pass = current_user.build_pass(pass_params)
n
current_user.pass.present?
n
current_user.user?
n
c!
@pass = current_user.build_pass(pass_params)
@pass = current_user.build_pass.(pass_params)
n
pass_params
n
current_user.pass.present?
n
current_user.user?
n
current_user.admin?
c!
current_user.id
current_user.pass
current_user.username
current_user
curent_user
curent_user.user_name
current_user.pass.present?
n
 current_user.user?
n
current_user.admin?
c
n
current_user.pass.present?
n
current_user.user?
n
current_user.admin?
c
n
current_user.pass.present?
n
current_user.user?
n
current_user.admin?
c!
cuc!
current_user.user?
n
current_user.role.role_type
c!
current_user.role.role_type
current_user.role
current_user
c!
c
 object.category.category_name
 object.category.name
c
n
object.user.username
c
object.user.username
object.user.user_name
object.user_name
object.user_id
object.pass.user_id
object.pass.username
object.pass.user.username
object.pass.user_name
object.pass
c
@passes
c
@pass.save
n
@pass = current_user.build_pass(pass_params)
n
c
@pass.save
@pass
n
@pass
n
current_user.pass
c
@pass
n
 current_user.pass
c
@pass.params
@pass
current
params
pass
@pass = current_user.build_pass(pass_params)
params
pass_params
n
current_user.pass
c
c!
n
render json: {error: 'User already has a pass'}, status: :unprocessable_entity
n
current_user.pass
c
 render json: current_user, status: :ok
c!
user_params
User.create!(user_params)
user_params
c
login_params[:username]
User.find_by(username: login_params[:username])
c
auth(:username)
login_params[:username]
User.find_by(username: login_params[:username])
c
params
User.find_by(username: login_params[:username])
c
User.find_by(username: login_params[:username])User.find_by(username: login_params[:username])
c
expect(response).to have_http_status(:success)
expect(pass.category_id).to eq(category.pass.category_id)
pass.category_id
pass
response.body
c
role
admin_user_role
c
admin_user_role
n
let(:role) {create(:role, role_type: "Admin")}
c
c!
admin_user
user
c
let(:user) { admin_user }
c
admin_user
let(:admin_user) {create(:user, role: admin_role)}
role
c!
user
c
admin_user
user.role
let(:user) { admin_user }
user
user.role.role_type
c
response.body
enquiry.reload
enquiry.message
put :update, params: { id: enquiry.id, enquiry: { message: "hii new message" } }
enquiry.message
c
enquiry.message
c!
enquiry.message
enquiry.reload
enquiry.message
put :update, params: {id: user.id, enquiry: {message: "hii new message"} }
enquiry.message
c!
expect(response).to have_http_status(:success)
expect(enquiry.message).to eq("hii new message")
